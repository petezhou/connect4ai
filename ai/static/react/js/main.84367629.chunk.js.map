{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","value","className","onClick","Board","state","squares","Array","fill","redIsNext","i","j","this","handleClick","map","arr","slice","row","setState","winner","renderSquare","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.84367629.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction Square(props) {\n    if (props.value === \"red\"){\n        return <button className=\"square redPiece\" onClick={props.onClick}> </button>;\n    } else if (props.value === \"yellow\") {\n        return <button className=\"square yellowPiece\" onClick={props.onClick}> </button>;\n    } else {\n        return <button className=\"square\" onClick={props.onClick}> </button>;\n    }\n}\n\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(6).fill(Array(7).fill(null)),\n            redIsNext: true\n        };\n    }\n\n    renderSquare(i, j) {\n        return <Square value={this.state.squares[i][j]} onClick={() => this.handleClick(i, j)} />\n    }\n\n    handleClick(i, j) {\n        const squares = this.state.squares.map((arr) => arr.slice());\n        for (let row = 5; row >= 0; row--){\n            if (squares[row][j] == null) {\n                squares[row][j] = this.state.redIsNext ? \"red\" : \"yellow\";\n                this.setState({\n                   squares: squares,\n                   redIsNext: !this.state.redIsNext\n                });\n                return;\n            }\n        }\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status = winner + \" wins!\"\n        } else {\n            status = \"\"\n        }\n\n        return (\n            <div className=\"board\">\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(0, 3)}\n                    {this.renderSquare(0, 4)}\n                    {this.renderSquare(0, 5)}\n                    {this.renderSquare(0, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(1, 3)}\n                    {this.renderSquare(1, 4)}\n                    {this.renderSquare(1, 5)}\n                    {this.renderSquare(1, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(2, 3)}\n                    {this.renderSquare(2, 4)}\n                    {this.renderSquare(2, 5)}\n                    {this.renderSquare(2, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(3, 3)}\n                    {this.renderSquare(3, 4)}\n                    {this.renderSquare(3, 5)}\n                    {this.renderSquare(3, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4, 0)}\n                    {this.renderSquare(4, 1)}\n                    {this.renderSquare(4, 2)}\n                    {this.renderSquare(4, 3)}\n                    {this.renderSquare(4, 4)}\n                    {this.renderSquare(4, 5)}\n                    {this.renderSquare(4, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5, 0)}\n                    {this.renderSquare(5, 1)}\n                    {this.renderSquare(5, 2)}\n                    {this.renderSquare(5, 3)}\n                    {this.renderSquare(5, 4)}\n                    {this.renderSquare(5, 5)}\n                    {this.renderSquare(5, 6)}\n                </div>\n\n            </div>\n        );\n    }\n\n\n}\n\n\nfunction App() {\n    // who starts etc. handled here and passed as props to Board\n    return (\n        <div className=\"App\">\n            <h1>Connect 4</h1>\n            <Board/>\n        </div>\n    );\n}\n\nexport default App;\n\n\nfunction calculateWinner(theBoard) {\n    return \"Player 1\"\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}